name: Terraform apply

on:
  workflow_call:
    inputs:
      account-id:
        required: true
        type: string
      aws-role-name:
        required: true
        type: string
      aws-region:
        required: false
        type: string
        default: us-east-1
      environment:
        required: true
        type: string
      aditional-var-file-artifact:
        required: false
        type: string
        default: ''
      aditional-var-file-name:
        required: false
        type: string
        default: 'aditional.tfvars'
      terraform-version:
        required: false
        type: string
        default: 1.10.0
      terraform-secrets:
          description: 'Comma separated list of sensitive variables names (e.g., rds_password), debe existir el secreto RDS_PASSWORD_$ENVIRONMENT'
          required: false
          type: string
          default: ''

jobs:
  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        id: creds
        with:
          role-to-assume: arn:aws:iam::${{ inputs.account-id }}:role/${{ inputs.aws-role-name }}
          aws-region: ${{ inputs.aws-region }}
          role-session-name: gha-tf-${{ github.actor }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform-version }}
      
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check

      - name: Generate Terraform Variables from Secrets
        if: inputs.terraform-secrets != ''
        run: |          
          SECRETS_FILE="env/secrets-${{ inputs.environment }}.tfvars"
          INPUT_SECRETS="${{ inputs.terraform-secrets }}"
          touch $SECRETS_FILE
          # Procesar lista separada por comas
          IFS=',' read -ra SECRETS <<< "$INPUT_SECRETS"

          for secret in "${SECRETS[@]}"; do
            # Limpiar espacios en blanco
            secret=$(echo "$secret" | xargs)
            [[ -z "$secret" ]] && continue
            
            tf_var_name="$secret"
            github_secret_name=$(echo "${secret}_${{ inputs.environment }}" | tr '[:lower:]' '[:upper:]')
            
            # Verificar si el secreto existe
            if [[ -n "${!github_secret_name:-}" ]]; then
              secret_value="${!github_secret_name}"
              echo "$tf_var_name = \"$secret_value\"" >> $SECRETS_FILE
            else
              echo "⚠️ Warning: Secret $github_secret_name not found"
            fi
          done

      - name: Merge var files
        if: inputs.terraform-secrets != ''
        run: |
          echo "" >> env/${{ inputs.environment }}.tfvars
          cat env/secrets-${{ inputs.environment }}.tfvars >> env/${{ inputs.environment }}.tfvars
      
      - name: Terraform Init
        id: init
        run: terraform init -backend-config=backend/${{ inputs.environment }}.conf
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      
      - name: Terraform apply 
        id: apply
        run: terraform apply -auto-approve -var-file env/${{ inputs.environment }}.tfvars
